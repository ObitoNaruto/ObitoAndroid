
1打开和关闭蓝牙设备

public class Main extends Activity
{

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
	}

	public void onClick_Enable_Bluetooth(View view)//打开蓝牙设备
	{

		 Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
		 startActivityForResult(enableIntent, 1);
		//BluetoothAdapter bluetoothAdapter = BluetoothAdapter
		//		.getDefaultAdapter();

	//	bluetoothAdapter.enable();//enable只会无声地开启蓝牙设备

	}

	public void onClick_Disable_Bluetooth(View view)//关闭蓝牙设备
	{
		BluetoothAdapter bluetoothAdapter = BluetoothAdapter
				.getDefaultAdapter();

		bluetoothAdapter.disable();

	}

}
<uses-permission android:name="android.permission.BLUETOOTH" />
	<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />

2.搜索蓝牙设备
public class Main extends Activity
{
	private BluetoothAdapter bluetoothAdapter;
	private TextView tvDevices;

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
		setContentView(R.layout.main);
		tvDevices = (TextView) findViewById(R.id.tvDevices);
		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        //获取所有已绑定的蓝牙设备
		Set<BluetoothDevice> pairedDevices = bluetoothAdapter
				.getBondedDevices();

		if (pairedDevices.size() > 0)
		{
			for (BluetoothDevice device : pairedDevices)
			{
				tvDevices.append(device.getName() + "：" + device.getAddress()
						+ "\n");
			}
		}
        //注册用于接收已搜索到的蓝牙设备的receiver
		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		this.registerReceiver(receiver, filter);
        //注册搜索已完成的receiver
		filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		this.registerReceiver(receiver, filter);

	}

	public void onClick_Search(View view)//开始搜索蓝牙设备
	{
		setProgressBarIndeterminateVisibility(true);
		setTitle("正在扫描...");

		if (bluetoothAdapter.isDiscovering())//正在搜索，取消搜索
		{
			bluetoothAdapter.cancelDiscovery();
		}
		bluetoothAdapter.startDiscovery();//开始搜索蓝牙设备
	}

	private final BroadcastReceiver receiver = new BroadcastReceiver()
	{
		@Override
		public void onReceive(Context context, Intent intent)
		{
			String action = intent.getAction();

			if (BluetoothDevice.ACTION_FOUND.equals(action))//获得已搜索到的蓝牙设备
			{

				BluetoothDevice device = intent
						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                //搜索到的蓝牙设备不是已绑定的设备
				if (device.getBondState() != BluetoothDevice.BOND_BONDED)
				{
					tvDevices.append(device.getName() + "："
							+ device.getAddress() + "\n");
				}

			}
			else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action))
			{
				setProgressBarIndeterminateVisibility(false);
				setTitle("搜索完成");


			}
		}
	};
}

<uses-permission android:name="android.permission.BLUETOOTH" />
	<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />

3.蓝牙数据传输
	public class Main extends Activity implements OnItemClickListener
    {
    	private ListView lvDevices;
    	private BluetoothAdapter bluetoothAdapter;
    	private List<String> bluetoothDevices = new ArrayList<String>();
    	private ArrayAdapter<String> arrayAdapter;
    	private final UUID MY_UUID = UUID
    			.fromString("db764ac8-7f26-4b08-aafe-59d03c27bae3");//全局唯一标识符
    	private final String NAME = "Bluetooth_Socket";
    	private AcceptThread acceptThread;
    	private BluetoothSocket clientSocket;
    	private BluetoothDevice device;
    	private OutputStream os;

    	@Override
    	public void onCreate(Bundle savedInstanceState)
    	{
    		super.onCreate(savedInstanceState);
    		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
    		setContentView(R.layout.main);
    		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

    		lvDevices = (ListView) findViewById(R.id.lvDevices);

    		Set<BluetoothDevice> pairedDevices = bluetoothAdapter
    				.getBondedDevices();

    		if (pairedDevices.size() > 0)
    		{
    			for (BluetoothDevice device : pairedDevices)
    			{
    				bluetoothDevices.add(device.getName() + ":"
    						+ device.getAddress() + "\n");
    			}
    		}
    		arrayAdapter = new ArrayAdapter<String>(this,
    				android.R.layout.simple_list_item_1, android.R.id.text1,
    				bluetoothDevices);

    		lvDevices.setAdapter(arrayAdapter);
    		lvDevices.setOnItemClickListener(this);
    		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
    		this.registerReceiver(receiver, filter);

    		filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
    		this.registerReceiver(receiver, filter);

    		acceptThread = new AcceptThread();
    		acceptThread.start();
    	}

    	public void onClick_Search(View view)
    	{
    		setProgressBarIndeterminateVisibility(true);
    		setTitle("正在搜索...");

    		if (bluetoothAdapter.isDiscovering())
    		{
    			bluetoothAdapter.cancelDiscovery();
    		}
    		bluetoothAdapter.startDiscovery();
    	}

    	@Override
    	public void onItemClick(AdapterView<?> parent, View view, int position,
    			long id)
    	{
    		String s = arrayAdapter.getItem(position);
    		String address = s.substring(s.indexOf(":") + 1).trim();

    		try
    		{
    			if (bluetoothAdapter.isDiscovering())
    			{
    				this.bluetoothAdapter.cancelDiscovery();
    			}

    			try
    			{

    				if (device == null)
    				{
    					device = bluetoothAdapter.getRemoteDevice(address);//获得蓝牙设备，相当于网络客户端的Ｓｏｃｋｅｔ指定的ＩＰ地址
    				}

    				if (clientSocket == null)
    				{
    					//通过ＵＵＩＤ连接蓝牙设备，相当于网络客户端Ｓｏｃｋｅｔ指定端口号
    					clientSocket = device
    							.createRfcommSocketToServiceRecord(MY_UUID);
    					clientSocket.connect();//开始连接蓝牙设备
    					os = clientSocket.getOutputStream();//获得向服务端发送数据的流对象
    				}

    			}
    			catch (IOException e)
    			{

    			}
    			if (os != null)
    			{

    				os.write("发送信息到其他蓝牙设备".getBytes("utf-8"));

    				Toast.makeText(this, "信息发送成功", Toast.LENGTH_LONG).show();
    			}
    			else
    			{
    				Toast.makeText(this, "信息发送失败", Toast.LENGTH_LONG).show();
    			}
    		}
    		catch (Exception e)
    		{
    			Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();

    		}

    	}

    	private final BroadcastReceiver receiver = new BroadcastReceiver()
    	{
    		@Override
    		public void onReceive(Context context, Intent intent)
    		{
    			String action = intent.getAction();

    			if (BluetoothDevice.ACTION_FOUND.equals(action))
    			{

    				BluetoothDevice device = intent
    						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);

    				if (device.getBondState() != BluetoothDevice.BOND_BONDED)
    				{
    					bluetoothDevices.add(device.getName() + ":"
    							+ device.getAddress() + "\n");
    					arrayAdapter.notifyDataSetChanged();
    				}

    			}
    			else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action))
    			{
    				setProgressBarIndeterminateVisibility(false);
    				setTitle("搜索完成");

    			}
    		}
    	};
    	private Handler handler = new Handler()
    	{

    		@Override
    		public void handleMessage(Message msg)
    		{
    			Toast.makeText(Main.this, String.valueOf(msg.obj),
    					Toast.LENGTH_LONG).show();
    			super.handleMessage(msg);
    		}

    	};

    	private class AcceptThread extends Thread
    	{
    		private BluetoothServerSocket serverSocket;
    		private BluetoothSocket socket;
    		private InputStream is;
    		private OutputStream os;

    		public AcceptThread()
    		{

    			try
    			{

    				serverSocket = bluetoothAdapter
    						.listenUsingRfcommWithServiceRecord(NAME, MY_UUID);//创建BluetoothServerSocket对象

    			}
    			catch (IOException e)
    			{

    			}

    		}

    		public void run()
    		{

    			try
    			{
    				socket = serverSocket.accept();//等待接收蓝牙客户端的请求
    				is = socket.getInputStream();
    				os = socket.getOutputStream();
    				while (true)//通过循环不断接收客户端发送过来的数据，如果客户端暂时没有发送数据，则read方法处于阻塞状态
    				{

    					byte[] buffer = new byte[128];
    					int count = is.read(buffer);

    					Message msg = new Message();
    					msg.obj = new String(buffer, 0, count, "utf-8");
    					handler.sendMessage(msg);
    				}

    			}
    			catch (Exception e)
    			{

    			}

    		}

    	}


    }


<uses-permission android:name="android.permission.BLUETOOTH" />
	<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />








