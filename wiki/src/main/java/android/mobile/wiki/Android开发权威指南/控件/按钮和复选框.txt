
1.1 普通的按钮控件

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:orientation="vertical" android:layout_width="fill_parent"
	android:layout_height="fill_parent" android:gravity="center_horizontal">
	<Button android:id="@+id/btnCommonButton" android:layout_width="wrap_content"
		android:layout_height="wrap_content" android:text="我的按钮1" />
	<Button android:id="@+id/btnImageButton"  android:layout_width="wrap_content"
		android:layout_height="wrap_content" android:text="按钮"
		android:gravity="center" android:background="@drawable/button1" />
</LinearLayout>



public class Main extends Activity implements OnClickListener, OnTouchListener,
		OnFocusChangeListener, OnKeyListener
{
	private int value = 1;
	private Button imageButton;
	private Button commonButton;
	private View lastFocusview;

	@Override
	public void onClick(View view)
	{
		Button button = (Button) view;
		//如果按钮宽度等于屏幕宽度，按钮开始缩小
		if (value == 1 && button.getWidth() == getWindowManager().getDefaultDisplay().getWidth()){
		    value = -1;
		}
		else if (value == -1 && button.getWidth() < 100){//如果按钮宽度小于100，按钮开始放大
		    value = 1;
		}
		//以按钮宽度和高度10%放大或缩小按钮
		button.setWidth(button.getWidth() + (int) (button.getWidth() * 0.1)* value);
		button.setHeight(button.getHeight() + (int) (button.getHeight() * 0.1)* value);
	}

	@Override
	public boolean onKey(View view, int keyCode, KeyEvent event)
	{
		if (KeyEvent.ACTION_DOWN == event.getAction())
		{
			view.setBackgroundResource(R.drawable.button3);
		}
		else if (KeyEvent.ACTION_UP == event.getAction())
		{
			view.setBackgroundResource(R.drawable.button2);
		}
		return false;
	}

	@Override
	public void onFocusChange(View view, boolean hasFocus)
	{
		if (hasFocus)
		{
			imageButton.setBackgroundResource(R.drawable.button2);
		}
		else
		{
			imageButton.setBackgroundResource(R.drawable.button1);
		}

	}

	@Override
	public boolean onTouch(View view, MotionEvent event)
	{

		if (event.getAction() == MotionEvent.ACTION_UP)//当手指或鼠标抬起时恢复按钮的默认状态
		{
			view.setBackgroundResource(R.drawable.button1);
		}
		else if (event.getAction() == MotionEvent.ACTION_DOWN)//当手指或鼠标按下时将按钮设置未按下状态
		{
			view.setBackgroundResource(R.drawable.button2);
		}

		return false;
	}

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		commonButton = (Button) findViewById(R.id.btnCommonButton);
		imageButton = (Button) findViewById(R.id.btnImageButton);
		commonButton.setOnClickListener(this);
		imageButton.setOnClickListener(this);
		imageButton.setOnTouchListener(this);
		imageButton.setOnFocusChangeListener(this);
		imageButton.setOnKeyListener(this);
	}
}

1.2RadioButton
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:orientation="vertical" android:layout_width="fill_parent"
	android:layout_height="fill_parent">
	<RadioGroup android:layout_width="wrap_content"
		android:layout_height="wrap_content">

		<RadioButton android:layout_width="wrap_content"
			android:layout_height="wrap_content" android:text="选项1" />
		<RadioButton android:layout_width="wrap_content"
			android:layout_height="wrap_content" android:text="选项2" />
		<RadioButton android:layout_width="wrap_content"
			android:layout_height="wrap_content" android:text="选项3"
			android:drawableLeft="@drawable/star" android:drawableTop="@drawable/circle"
			android:drawableRight="@drawable/star" android:drawableBottom="@drawable/circle" android:drawablePadding="20dp" />
	</RadioGroup>
</LinearLayout>

1.3 ToggleButton
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:orientation="horizontal" android:layout_width="fill_parent"
	android:layout_height="fill_parent">
	<ToggleButton android:layout_width="wrap_content"
		android:layout_height="wrap_content"/>

	<ToggleButton android:id="@+id/toggleButton" android:layout_width="wrap_content"
		android:layout_height="wrap_content" android:layout_marginLeft="30dp"
		android:textOff="打开电灯" android:textOn="关闭电灯"  />

</LinearLayout>















