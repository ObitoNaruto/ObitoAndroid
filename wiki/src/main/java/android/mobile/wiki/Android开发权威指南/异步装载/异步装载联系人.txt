
public class ContactFragment extends ListFragment implements
		OnQueryTextListener, LoaderManager.LoaderCallbacks<Cursor>
{
	//提供数据源的SimpleCursorAdapter对象
	private SimpleCursorAdapter mAdapter;
	//保存当前过滤字符串的变量（从SearchView中获取）
	private String mCurFilter;
	//查询联系人信息后返回联系人的哪些字段
	static final String[] CONTACTS_SUMMARY_PROJECTION = new String[]
	{ Contacts._ID, Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS,
			Contacts.CONTACT_PRESENCE, Contacts.PHOTO_ID, Contacts.LOOKUP_KEY, };

    //第1步：Fragment初始化
	@Override
	public void onActivityCreated(Bundle savedInstanceState)
	{
		super.onActivityCreated(savedInstanceState);
        //在ListView上显示一行文本，如果ListView未装载数据，或转载的数据集为null
		setEmptyText("没有该联系人");
        //如果想让Fragment与ActionBar关联，必须加上如下代码，否则Fragment处于活动状态时不会在ActionBar上显示Action按钮
		setHasOptionsMenu(true);
        //创建一个SimpleCursorAdapter对象，但不指定Cursor对象，构造方法的第3个参数为null
		mAdapter = new SimpleCursorAdapter(getActivity(),
				android.R.layout.simple_list_item_2, null, new String[]
				{ ContactsContract.Contacts.DISPLAY_NAME,
						ContactsContract.Contacts.CONTACT_STATUS }, new int[]
				{ android.R.id.text1, android.R.id.text2 }, 0);
		setListAdapter(mAdapter);
        //创建新的 Loader对象，或重用以前创建的Loader对象，其中Loader Id为0，
        //没有向Loader传递数据
		getLoaderManager().initLoader(0, null, this);
	}
     //第2步：Fragment与ActionBar关联
	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater)
	{

		MenuItem item = menu.add("搜索");
		item.setIcon(R.drawable.search);
		item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
		SearchView sv = new SearchView(getActivity());

		sv.setOnQueryTextListener(this);
		item.setActionView(sv);//将SearchView与Action按钮关联
	}
    //第4步;创建新的Loader对象
	@Override
	public Loader<Cursor> onCreateLoader(int id, Bundle args)
	{
		Uri baseUri;
		if (mCurFilter != null)
		{
			baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,
					Uri.encode(mCurFilter));
		}
		else
		{
			baseUri = Contacts.CONTENT_URI;
		}

		String select = "((" + Contacts.DISPLAY_NAME + " NOTNULL) AND ("
				+ Contacts.HAS_PHONE_NUMBER + "=1) AND ("
				+ Contacts.DISPLAY_NAME + " != '' ))";
		return new CursorLoader(getActivity(), baseUri,
				CONTACTS_SUMMARY_PROJECTION, select, null,
				Contacts.DISPLAY_NAME + " COLLATE LOCALIZED ASC");
	}
    //第5步：处理装载完的数据
	@Override
	public void onLoadFinished(Loader<Cursor> loader, Cursor data)
	{
		//用新的Cursor对象替换旧的Cursor对象，新的Cursor对象是在CursorLoader中异步创建的
		mAdapter.swapCursor(data);

	}
    //第6步：释放资源
	@Override
	public void onLoaderReset(Loader<Cursor> loader)
	{

		mAdapter.swapCursor(null);//将当前使用的Cursor对象变量设为null
	}

	@Override
	public boolean onQueryTextSubmit(String query)
	{

		return true;
	}
    //第3步：重新创建Loader对象
	@Override
	public boolean onQueryTextChange(String newText)
	{
		mCurFilter = !TextUtils.isEmpty(newText) ? newText : null;
		//调用restartLoader后，以前的Loader对象会被释放，然后重新建立新的Loader对象
		getLoaderManager().restartLoader(0, null, this);
		return true;
	}

}
































