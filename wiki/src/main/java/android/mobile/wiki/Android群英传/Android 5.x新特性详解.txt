
1.Material Design 主题

三种默认主题：
@android:style/Theme.Material
@android:style/Theme.Material.Light
@android:style/Theme.Material.Light.DarkActionBar

自定义style主题：

<style name="AppTheme" parent="android:Theme.Material">
        //app bar的背景颜色
       <item name="android:colorPrimary">#bebebe</item>
       //状态栏颜色
       <item name="android:colorPrimaryDark">#ff5aebef</item>

       <item name="android:navigationBarColor">#ffff4130</item>
    </style>


2.Palette提取颜色，修改当前主题色调


public class MainActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Bitmap bitmap = BitmapFactory.decodeResource(getResources(),
                R.drawable.test);
        // 创建Palette对象
        Palette.generateAsync(bitmap,
                new Palette.PaletteAsyncListener() {
                    @Override
                    public void onGenerated(Palette palette) {
                        // 通过Palette来获取对应的色调
                        Palette.Swatch vibrant =
                                palette.getDarkVibrantSwatch();
                        // 将颜色设置给相应的组件
                        getActionBar().setBackgroundDrawable(
                                new ColorDrawable(vibrant.getRgb()));
                        Window window = getWindow();
                        window.setStatusBarColor(vibrant.getRgb());
                    }
                });
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:palette-v7:21.0.3'
}


3.视觉与阴影

Z = elevation + translationZ;

android:elevation="xxdp" //设置视图高度

view.setTranslationZ(xxx);


view.animate().translationZ(xxx);


4.裁剪

ViewOutlineProvider viewOutlineProvider1 =
    new ViewOutlineProvider(){
        @Override
        public void getOutline(View view, Outline outline){
            //修改outline为特定形状:矩形
            outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), 30);
        }
    };

    ViewOutlineProvider viewOutlineProvider2 =
        new ViewOutlineProvider(){
            @Override
            public void getOutline(View view, Outline outline){
                //修改outline为特定形状：椭圆
                outline.setOval(0, 0, view.getWidth(), view.getHeight());
            }
        };

//重置设置形状
v1.setOutlineProvider(viewOutlineProvider1);
v2.setOutlineProvider(viewOutlineProvider2);


4.列表卡片

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin">

    <android.support.v7.widget.RecyclerView
        android:id="@+id/rc_list"
        android:scrollbars="vertical"
        android:layout_weight="9"
        android:layout_width="match_parent"
        android:layout_height="0dp" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1">

        <Spinner
            android:layout_width="0dp"
            android:layout_weight="1"
            android:layout_height="wrap_content"
            android:id="@+id/spinner"
            android:entries="@array/recycler_list" />

        <Button
            android:layout_width="0dp"
            android:layout_weight="1"
            android:layout_height="wrap_content"
            android:text="Add"
            android:onClick="addRecycler" />

        <Button
            android:layout_width="0dp"
            android:layout_weight="1"
            android:layout_height="wrap_content"
            android:text="Del"
            android:onClick="delRecycler" />
    </LinearLayout>


</LinearLayout>

public class RecyclerTest extends Activity {

    private RecyclerView mRcList;
    private RecyclerAdapter mAdapter;
    private RecyclerView.LayoutManager mLayoutManager;

    private Spinner mSpinner;

    private List<String> mData = new ArrayList<String>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.recycler);

        mRcList = (RecyclerView) findViewById(R.id.rc_list);
        mLayoutManager = new LinearLayoutManager(this);
        mRcList.setLayoutManager(mLayoutManager);
        mRcList.setHasFixedSize(true);
        // 设置显示动画
        mRcList.setItemAnimator(new DefaultItemAnimator());

        mSpinner = (Spinner) findViewById(R.id.spinner);
        mSpinner.setOnItemSelectedListener(
                new AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(AdapterView<?> parent,
                                               View view,
                                               int position,
                                               long id) {
                        if (position == 0) {
                            mRcList.setLayoutManager(
                                    // 设置为线性布局
                                    new LinearLayoutManager(
                                            RecyclerTest.this));
                        } else if (position == 1) {
                            mRcList.setLayoutManager(
                                    // 设置为表格布局
                                    new GridLayoutManager(
                                            RecyclerTest.this, 3));
                        } else if (position == 2) {
                        }
                    }

                    @Override
                    public void onNothingSelected(AdapterView<?> parent) {
                    }
                });
        // 增加测试数据
        mData.add("Recycler");
        mData.add("Recycler");
        mData.add("Recycler");
        mAdapter = new RecyclerAdapter(mData);
        mRcList.setAdapter(mAdapter);
        mAdapter.setOnItemClickListener(
            new RecyclerAdapter.OnItemClickListener() {
                @Override
                public void onItemClick(final View view, int position) {
                    // 设置点击动画
                    view.animate()
                    .translationZ(15F).setDuration(300)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            super.onAnimationEnd(animation);
                            view.animate()
                                    .translationZ(1f)
                                    .setDuration(500).start();
                        }
                    }).start();
                }
            });
    }

    public void addRecycler(View view) {
        mData.add("Recycler");
        int position = mData.size();
        if (position > 0) {
            mAdapter.notifyDataSetChanged();
        }
    }

    public void delRecycler(View view) {
        int position = mData.size();
        if (position > 0) {
            mData.remove(position - 1);
            mAdapter.notifyDataSetChanged();
        }
    }
}


public class RecyclerAdapter
        extends RecyclerView.Adapter<RecyclerAdapter.ViewHolder> {

    private List<String> mData;

    public RecyclerAdapter(List<String> data) {
        mData = data;
    }

    public OnItemClickListener itemClickListener;

    public void setOnItemClickListener(
            OnItemClickListener itemClickListener) {
        this.itemClickListener = itemClickListener;
    }

    public interface OnItemClickListener {
        void onItemClick(View view, int position);
    }

    public class ViewHolder extends RecyclerView.ViewHolder
            implements View.OnClickListener {

        public TextView textView;

        public ViewHolder(View itemView) {
            super(itemView);
            textView = (TextView) itemView;
            textView.setOnClickListener(this);
        }

        // 通过接口回调来实现RecyclerView的点击事件
        @Override
        public void onClick(View v) {
            if (itemClickListener != null) {
                itemClickListener.onItemClick(v, getPosition());
            }
        }
    }

    @Override
    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        // 将布局转化为View并传递给RecyclerView封装好的ViewHolder
        View v = LayoutInflater.from(viewGroup.getContext()).inflate(
                R.layout.rc_item, viewGroup, false);
        return new ViewHolder(v);
    }

    @Override
    public void onBindViewHolder(ViewHolder viewHolder, int i) {
        // 建立起ViewHolder中视图与数据的关联
        viewHolder.textView.setText(mData.get(i) + i);
    }

    @Override
    public int getItemCount() {
        return mData.size();
    }
}

5.Activity过渡动画

5.1 Activity A

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:orientation="vertical"
    android:layout_height="match_parent">


    <Button
        android:layout_width="match_parent"
        android:layout_height="100dp"
        android:onClick="explode"
        android:text="explode" />

    <Button
        android:layout_width="match_parent"
        android:layout_height="100dp"
        android:onClick="slide"
        android:text="slide" />

    <Button
        android:layout_width="match_parent"
        android:layout_height="100dp"
        android:onClick="fade"
        android:text="fade" />

    <Button
        android:layout_width="match_parent"
        android:layout_height="100dp"
        android:transitionName="share"
        android:onClick="share"
        android:text="share" />

    <Button
        android:id="@+id/fab_button"
        android:layout_width="56dp"
        android:transitionName="fab"
        android:layout_height="56dp"
        android:background="@drawable/ripple_round"
        android:elevation="5dp"/>
</LinearLayout>

public class MainActivity extends Activity {

    private Intent intent;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_transition);
    }

    // 设置不同动画效果
    public void explode(View view) {
        intent = new Intent(this, Transitions.class);
        intent.putExtra("flag", 0);
        startActivity(intent,
                ActivityOptions.makeSceneTransitionAnimation(this)
                        .toBundle());
    }
    // 设置不同动画效果
    public void slide(View view) {
        intent = new Intent(this, Transitions.class);
        intent.putExtra("flag", 1);
        startActivity(intent,
                ActivityOptions.makeSceneTransitionAnimation(this)
                        .toBundle());
    }
    // 设置不同动画效果
    public void fade(View view) {
        intent = new Intent(this, Transitions.class);
        intent.putExtra("flag", 2);
        startActivity(intent,
                ActivityOptions.makeSceneTransitionAnimation(this)
                        .toBundle());
    }
    // 设置不同动画效果
    public void share(View view) {
        View fab = findViewById(R.id.fab_button);
        intent = new Intent(this, Transitions.class);
        intent.putExtra("flag", 3);
        // 创建单个共享元素
//        startActivity(intent,
//                ActivityOptions.makeSceneTransitionAnimation(
//                        this, view, "share").toBundle());
        startActivity(intent,
                ActivityOptions.makeSceneTransitionAnimation(
                        this,
                        // 创建多个共享元素
                        Pair.create(view, "share"),
                        Pair.create(fab, "fab")).toBundle());
    }
}


5.2 Activity B

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    tools:context=".MyActivity">

    <View
        android:id="@+id/holder_view"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:transitionName="share"
        android:background="?android:colorPrimary" />

    <Button xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@+id/fab_button"
        android:transitionName="fab"
        android:layout_width="56dp"
        android:layout_height="56dp"
        android:layout_marginRight="@dimen/activity_horizontal_margin"
        android:background="@drawable/ripple_round"
        android:elevation="5dp"
        android:layout_below="@+id/holder_view"
        android:layout_marginTop="-26dp"
        android:layout_alignParentEnd="true" />

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingTop="10dp"
        android:layout_below="@id/holder_view">

        <Button
            android:layout_width="match_parent"
            android:layout_height="60dp"
            android:id="@+id/button"
            android:layout_below="@+id/button4"
            android:layout_marginTop="10dp" />

        <Button
            android:layout_width="match_parent"
            android:layout_height="60dp"
            android:layout_marginTop="10dp"
            android:id="@+id/button4"
            android:layout_alignParentStart="true" />


    </RelativeLayout>

</RelativeLayout>

public class Transitions extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);
        int flag = getIntent().getExtras().getInt("flag");
        // 设置不同的动画效果
        switch (flag) {
            case 0:
                getWindow().setEnterTransition(new Explode());//进入B的动画效果
                break;
            case 1:
                getWindow().setEnterTransition(new Slide());
                break;
            case 2:
                getWindow().setEnterTransition(new Fade());
                getWindow().setExitTransition(new Fade());//离开B的动画效果
                break;
            case 3:
                break;
        }
        setContentView(R.layout.activity_transition_to);
    }
}


6.Ripple效果

点击后的波纹
//波纹有边界
android:background="?android:attr/selectableItemBackground"
//波纹超出边界
android:background="?android:attr/selectableItemBackgroundBorderless"

方法二：

<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="?android:colorControlHighlight">
    <item>
        <shape android:shape="oval">
            <solid android:color="#738ffe" />
        </shape>
    </item>
</ripple>

android:background="@drawable/ripple"

7.Circular  Reveal

Animator animator = ViewAnimationUtils.createCircularReveal(
    oval,//view对象
    oval.getWidth() / 2;
    oval.getHeight() / 2;
    oval.getWidth(),
    0);

    animator.setInterpolator(new AccelerateDecelerateInterpolator());
    animator.setDuration(2000);
    animator.start();


 8. View state changes Animation

 <animated-selector xmlns:android="http://schemas.android.com/apk/res/android">
     <item
         android:id="@+id/state_on"
         android:state_checked="true">
         <bitmap android:src="@drawable/ic_done_anim_030" />
     </item>
     <item android:id="@+id/state_off">
         <bitmap android:src="@drawable/ic_plus_anim_030" />
     </item>
     <transition
         android:fromId="@+id/state_on"
         android:toId="@+id/state_off">
         <animation-list>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_000" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_001" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_002" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_003" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_004" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_005" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_006" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_007" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_008" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_009" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_010" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_011" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_012" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_013" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_014" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_015" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_016" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_017" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_018" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_019" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_020" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_021" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_022" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_023" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_024" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_025" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_026" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_027" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_028" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_029" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_plus_anim_030" />
             </item>
         </animation-list>
     </transition>
     <transition
         android:fromId="@+id/state_off"
         android:toId="@+id/state_on">
         <animation-list>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_000" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_001" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_002" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_003" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_004" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_005" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_006" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_007" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_008" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_009" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_010" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_011" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_012" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_013" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_014" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_015" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_016" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_017" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_018" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_019" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_020" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_021" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_022" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_023" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_024" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_025" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_026" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_027" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_028" />
             </item>a
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_029" />
             </item>
             <item android:duration="16">
                 <bitmap android:src="@drawable/ic_done_anim_030" />
             </item>
         </animation-list>
     </transition>
 </animated-selector>



public class MainActivity extends Activity {

    private boolean mIsCheck;
    private static final int[] STATE_CHECKED = new int[]{
            android.R.attr.state_checked};
    private static final int[] STATE_UNCHECKED = new int[]{};
    private ImageView mImageView;
    private Drawable mDrawable;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mImageView = (ImageView) findViewById(R.id.image);
        mDrawable = getResources().getDrawable(
                R.drawable.fab_anim);
        mImageView.setImageDrawable(mDrawable);
    }

    public void anim(View view) {
        if (mIsCheck) {
            mImageView.setImageState(STATE_UNCHECKED, true);
            mIsCheck = false;
        } else {
            mImageView.setImageState(STATE_CHECKED, true);
            mIsCheck = true;
        }
    }
}

9.ToolBar

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
        <!-- toolbar颜色 -->
        <item name="colorPrimary">#4876FF</item>
        <!-- 状态栏颜色 -->
        <item name="colorPrimaryDark">#3A5FCD</item>
        <!-- 窗口的背景颜色 -->
        <item name="android:windowBackground">@android:color/white</item>
        <!-- SearchView -->
        <item name="searchViewStyle">@style/MySearchView</item>
    </style>

    <style name="MySearchView" parent="Widget.AppCompat.SearchView" />
</resources>


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
}

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <include layout="@layout/toolbar" />

    <android.support.v4.widget.DrawerLayout
        android:id="@+id/drawer"
        android:layout_width="match_parent"
        android:layout_height="match_parent" >

        <!-- 内容界面 -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="@android:color/holo_blue_light"
            android:orientation="vertical" >
            <Button
                android:layout_width="100dp"
                android:layout_height="match_parent"
                android:text="内容界面"/>
        </LinearLayout>

        <!-- 侧滑菜单内容 必须指定其水平重力 -->
        <LinearLayout
            android:id="@+id/drawer_view"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_gravity="start"
            android:orientation="vertical" >
            <Button
                android:layout_width="200dp"
                android:layout_height="match_parent"
                android:text="菜单界面"/>
        </LinearLayout>
    </android.support.v4.widget.DrawerLayout>
</LinearLayout>


<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:context=".MainActivity" >

    <item
        android:id="@+id/ab_search"
        android:orderInCategory="80"
        android:title="action_search"
        app:actionViewClass="android.support.v7.widget.SearchView"
        app:showAsAction="ifRoom"/>
    <item
        android:id="@+id/action_share"
        android:orderInCategory="90"
        android:title="action_share"
        app:actionProviderClass="android.support.v7.widget.ShareActionProvider"
        app:showAsAction="ifRoom"/>
    <item
        android:id="@+id/action_settings"
        android:orderInCategory="100"
        android:title="action_settings"
        app:showAsAction="never"/>

</menu>


public class MainActivity extends ActionBarActivity {

    private Toolbar mToolbar;
    private ShareActionProvider mShareActionProvider;
    private DrawerLayout mDrawerLayout;
    private ActionBarDrawerToggle mDrawerToggle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mToolbar = (Toolbar) findViewById(R.id.toolbar);
        mToolbar.setLogo(R.drawable.ic_launcher);
        // 标题的文字需在setSupportActionBar之前，不然会无效
        mToolbar.setTitle("主标题");
        mToolbar.setSubtitle("副标题");
        setSupportActionBar(mToolbar);

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer);
        mDrawerToggle = new ActionBarDrawerToggle(
                this, mDrawerLayout, mToolbar,
                R.string.abc_action_bar_home_description,
                R.string.abc_action_bar_home_description_format);
        mDrawerToggle.syncState();
        mDrawerLayout.setDrawerListener(mDrawerToggle);

		// 菜单的监听可以在toolbar里设置，
		// 也可通过Activity的onOptionsItemSelected回调方法来处理
        mToolbar.setOnMenuItemClickListener(
                new Toolbar.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.action_settings:
                        Toast.makeText(MainActivity.this,
                                "action_settings", Toast.LENGTH_SHORT).show();
                        break;
                    default:
                        break;
                }
                return true;
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
		/* ShareActionProvider配置 */
        mShareActionProvider = (ShareActionProvider) MenuItemCompat.getActionProvider(menu
                .findItem(R.id.action_share));
        Intent intent = new Intent(Intent.ACTION_SEND);
        intent.setType("text/*");
        mShareActionProvider.setShareIntent(intent);
        return super.onCreateOptionsMenu(menu);
    }
}

10.Notification
public class MainActivity extends Activity {

    private int NOTIFICATION_ID_BASIC = 1;
    private int NOTIFICATION_ID_COLLAPSE = 2;
    private int NOTIFICATION_ID_HEADSUP = 3;
    private int NOTIFICATION_ID_VISIBILITY = 4;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    public void basicNotify(View view) {
        Intent intent = new Intent(Intent.ACTION_VIEW,
                Uri.parse("http://www.baidu.com"));
        // 构造PendingIntent
        PendingIntent pendingIntent = PendingIntent.getActivity(
                this, 0, intent, 0);
        // 创建Notification对象
        Notification.Builder builder = new Notification.Builder(this);
        // 设置Notification的各种属性
        builder.setSmallIcon(R.drawable.ic_launcher);
        builder.setContentIntent(pendingIntent);
        builder.setAutoCancel(true);
        builder.setLargeIcon(BitmapFactory.decodeResource(
                getResources(), R.drawable.ic_launcher));
        builder.setContentTitle("Basic Notifications");
        builder.setContentText("I am a basic notification");
        builder.setSubText("it is really basic");
        // 通过NotificationManager来发出Notification
        NotificationManager notificationManager =
                (NotificationManager) getSystemService(
                        NOTIFICATION_SERVICE);
        notificationManager.notify(NOTIFICATION_ID_BASIC,
                builder.build());
    }
    //折叠式
    public void collapsedNotify(View view) {
        Intent intent = new Intent(Intent.ACTION_VIEW,
                Uri.parse("http://www.sina.com"));
        PendingIntent pendingIntent = PendingIntent.getActivity(
                this, 0, intent, 0);
        Notification.Builder builder = new Notification.Builder(this);
        builder.setSmallIcon(R.drawable.ic_launcher);
        builder.setContentIntent(pendingIntent);
        builder.setAutoCancel(true);
        builder.setLargeIcon(BitmapFactory.decodeResource(
                getResources(), R.drawable.ic_launcher));
        // 通过RemoteViews来创建自定义的Notification视图
        RemoteViews contentView =
                new RemoteViews(getPackageName(),
                        R.layout.notification);
        contentView.setTextViewText(R.id.textView,
                "show me when collapsed");

        Notification notification = builder.build();
        notification.contentView = contentView;
        // 通过RemoteViews来创建自定义的Notification视图
        RemoteViews expandedView =
                new RemoteViews(getPackageName(),
                        R.layout.notification_expanded);
        notification.bigContentView = expandedView;

        NotificationManager nm = (NotificationManager)
                getSystemService(NOTIFICATION_SERVICE);
        nm.notify(NOTIFICATION_ID_COLLAPSE, notification);
    }
    //悬挂式
    public void headsupNotify(View view) {
        Notification.Builder builder = new Notification.Builder(this)
                .setSmallIcon(R.drawable.ic_launcher)
                .setPriority(Notification.PRIORITY_DEFAULT)
                .setCategory(Notification.CATEGORY_MESSAGE)
                .setContentTitle("Headsup Notification")
                .setContentText("I am a Headsup notification.");

        Intent push = new Intent();
        push.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        push.setClass(this, MainActivity.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(
                this, 0, push, PendingIntent.FLAG_CANCEL_CURRENT);
        builder.setContentText("Heads-Up Notification on Android 5.0")
                .setFullScreenIntent(pendingIntent, true);//这句代码的作用

        NotificationManager nm = (NotificationManager)
                getSystemService(NOTIFICATION_SERVICE);
        nm.notify(NOTIFICATION_ID_HEADSUP, builder.build());
    }
    //显示等级
    public void visibilityNotify(View view) {
        RadioGroup radioGroup = (RadioGroup) findViewById(
                visibility_radio_group);
        Notification.Builder builder = new Notification.Builder(this)
                .setContentTitle("Notification for Visibility Test");
        switch (radioGroup.getCheckedRadioButtonId()) {
            case R.id.radio_button_public:
                builder.setVisibility(Notification.VISIBILITY_PUBLIC);//在任何情况下都会显示
                builder.setContentText("Public");
                builder.setSmallIcon(R.drawable.ic_public);
                break;
            case R.id.radio_button_private:
                builder.setVisibility(Notification.VISIBILITY_PRIVATE);//只有在当没有锁屏时才会显示
                builder.setContentText("Private");
                builder.setSmallIcon(R.drawable.ic_private);
                break;
            case R.id.radio_button_secret:
                builder.setVisibility(Notification.VISIBILITY_SECRET);//在pin ，password等安全锁和没有锁屏的情况下才能够显示
                builder.setContentText("Secret");
                builder.setSmallIcon(R.drawable.ic_secret);
                break;
        }
        NotificationManager nm = (NotificationManager)
                getSystemService(NOTIFICATION_SERVICE);
        nm.notify(NOTIFICATION_ID_VISIBILITY, builder.build());
    }
}





